#!/usr/bin/env python3
import logging
import pathlib
import re
from shutil import which
import subprocess
import sys

log = logging.getLogger("virus.exe")
log.setLevel("INFO")

# install simple-term-menu
if "simple_term_menu" not in sys.modules:
    may_i_please_install_simple_term_menu = input(
        "I need a pure python package called 'simple-term-menu' to run, but it isn't installed. Can I install it? [y/n]"
    )
    if may_i_please_install_simple_term_menu.lower() == "y":
        log.info("Thank you, installing simple-term-menu")
        subprocess.run(["pip", "install", "simple-term-menu"])
    else:
        log.info(
            "Sorry to hear that, exiting as I cannot run without simple-term-menu :'("
        )
        sys.exit()

# NOTE can't import until we know it's installed
from simple_term_menu import TerminalMenu

# install brew
if which("brew") is None:
    brew_menu = TerminalMenu(
        ["Yes", "No"], title="Homebrew isn't installed. May I install it?"
    )
    may_i_please_install_brew = brew_menu.show()
    if may_i_please_install_brew == 0:
        log.info("Thank you, installing homebrew")
        subprocess.run(
            [
                "/bin/bash",
                "-c",
                '"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"',
            ]
        )
    else:
        log.info("Sorry to hear that, exiting as I cannot run without homebrew :'(")
        sys.exit()

# install mackup
if which("mackup") is None:
    mackup_menu = TerminalMenu(
        ["Yes", "No"], title="mackup isn't installed. May I install it?"
    )
    may_i_please_install_mackup = mackup_menu.show()
    if may_i_please_install_mackup == 0:
        log.info("Thank you, installing mackup")
        subprocess.run(["brew", "install", "mackup"])
    else:
        log.info("Sorry to hear that, exiting as I cannot run without mackup :'(")
        sys.exit()

# link config
link_menu = TerminalMenu(
    ["Yes", "No"],
    title="Ok, now I need to link your config files to the right places. Cool with that?",
)
may_i_please_link_configs = link_menu.show()
if may_i_please_link_configs == 0:
    log.info("Thank you, linking configs")
    subprocess.run(
        [
            "ln",
            "-svf",
            str(pathlib.Path.cwd() / ".mackup.cfg"),
            str(pathlib.Path.home() / ".mackup.cfg"),
        ]
    )
    if (pathlib.Path.cwd() / ".mackup").exists():
        subprocess.run(
            [
                "ln",
                "-svf",
                str(pathlib.Path.cwd() / ".mackup"),
                str(pathlib.Path.home() / ".mackup"),
            ]
        )
    subprocess.run(["mackup", "restore"])
else:
    log.info("Sorry to hear that, exiting as I cannot run without mackup :'(")
    sys.exit()

# Install programs with brew
brewpath = pathlib.Path.home() / ".config" / "homebrew"
brewfiles = [path.name for path in brewpath.iterdir()]
brew_groups = [
    brew_group.group("module")
    for brewfile in brewfiles
    if (brew_group := re.match(r"(?P<module>[a-zA-Z]+)\.Brewfile", brewfile))
]

terminal_menu = TerminalMenu(
    brew_groups,
    title="Which collections should brew install?",
    multi_select=True,
    show_multi_select_hint=True,
)
selected_indices = terminal_menu.show()

selected_brewfiles = {brew_groups[i]: brewfiles[i] for i in selected_indices}

log.info("This could take a while... plug me in and go touch some grass.")
for groupname, brewfile in selected_brewfiles.items():
    brewfile_path = brewpath / brewfile
    log.info("Installing %s dependencies...", groupname)
    subprocess.run(["brew", "bundle", "install", "--file", brewfile_path])
    log.info("Finished installing %s dependencies!", groupname)

log.info("Installing doom")
subprocess.run(
    ["git", "clone", "https://github.com/hlissner/doom-emacs", "~/.config/doom-emacs"]
)

log.info("Adding `dots` alias for `...` dir so nushell can find it (without 'smart'ly resolving the ...)")
subprocess.run(
    [
        "ln",
        "-svf",
        str(pathlib.Path.cwd()),
        str(pathlib.Path.home() / ".config" / "dots"),
    ]
)
