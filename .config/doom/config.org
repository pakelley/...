#+property: header-args:emacs-lisp :tangle yes
#+property: header-args:elisp :tangle yes

* Packages
#+begin_src elisp :tangle packages.el
(package! benchmark-init)
(package! transient)
(package! with-editor :pin "391e76a256aeec6b9e4cbd733088f30c677d965b")
#+end_src
* Set theme
For now, I like this one. We'll see how long it lasts.
#+begin_src elisp
(setq doom-theme 'doom-oceanic-next)
#+end_src
* Set localleader key
I don't like pressing two keys for my localleader... And you have to unbind evil-snipe's "," conflict.
#+begin_src elisp
(setq evil-snipe-override-evil-repeat-keys nil)
(setq doom-localleader-key ",")
(setq doom-localleader-alt-key "M-,")
#+end_src
* Set "SPC SPC" to call M-x, because I use M-x so often (and I miss this setting from spacemacs).
#+begin_src elisp
(map! (:leader
       :desc "M-x"  "SPC" #'execute-extended-command))
#+end_src
* Set window bindings
I think these are easier to remember than the doom defaults (plus they're what I use in tmux)
#+begin_src elisp
(map! (:map evil-window-map
       "/" #'+evil-window-vsplit-a
       "?" #'+evil/window-vsplit-and-follow
       "-" #'+evil-window-split-a
       "_" #'+evil/window-split-and-follow))
#+end_src
* Relative line numbers
Makes it easier to prefix commands with numbers (e.g. `5 j` would go 5 down, and I can see where that will put me with relative line numbers)
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src
* Shorten path in modeline
Makes working in a monorepo less terrible
#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-buffer-file-name-style 'truncate-with-project))
#+end_src
* Make evil-paste not kill (because it's usually more annoying than helpful for me)
#+begin_src elisp
(setq-default evil-kill-on-visual-paste nil)
#+end_src
* Keybinding to add buffer to a workspace (via persp)
#+begin_src emacs-lisp :tangle yes
(use-package! persp-mode
  :commands persp-add-buffer
  :config
  (map! :leader
        (:prefix ("TAB" . "workspace")
         :desc "Add buffer to a workspace" "a" #'persp-add-buffer)))
#+end_src
* Quick binding to change workspaces
#+begin_src emacs-lisp :tangle yes
(map! "s-\\" #'+workspace/switch-to)
#+end_src
* Revert to preferred emacs kbds
#+begin_src emacs-lisp :tangle yes
(map!
 (:map evil-eval-map "C-k" nil)
 (:map evil-insert-state-map "C-k" nil)
 (:map evil-replace-state-map "C-k" nil)
 (:map read-expression-map "C-k" nil)
 (:map vertico-map "C-k" nil)
 (:map vertico-map :i "C-k" nil))
#+end_src
* encryption/authentication
** gpg setup
a few things to make gpg run smoother
*** make epg work with emacs 29.1
This seems to be the generally accepted way to get epg to play nicely with emacs 29.1,
e.g. from [[https://stackoverflow.com/a/76389612][this SE post]] and [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][this mastering emacs post]].
#+begin_src emacs-lisp :tangle yes
(fset 'epg-wait-for-status 'ignore)
#+end_src
*** set default recipient, to avoid symmetric encryption
If there's no default recipient for gpg, emacs will default to using symmetric encryption (and prompt for a password, then... seems to just brick the file) when saving '.gpg' files, rather than using my gpg keys. Set the default recipient to avoid this.
This also happens when the oauth2 library tries to save secrets to a plstore file, so set the recipient for that too.
#+begin_src emacs-lisp :tangle yes
(setq epa-file-encrypt-to '("pakelley@hey.com"))
(setq epa-file-encrypt-to-key '("pakelley@hey.com"))
(setq epa-file-select-keys nil) ;; make sure we don't use symmetric encryption
(setq plstore-encrypt-to '("pakelley@hey.com"))
#+end_src
*** make sure 'authinfo.gpg' is at the front of auth-sources
to avoid defaulting to the keyring, and sometimes breaking things bc of unsupported capabilities
Also, invalidate any cached auth info
#+begin_src emacs-lisp :tangle yes
;; (setq auth-sources (push "~/.authinfo.gpg" auth-sources))
;; previously: (macos-keychain-generic macos-keychain-internet "~/.config/doom-emacs/.local/state/authinfo.gpg" "~/.authinfo.gpg")
(use-package auth-source)
(auth-source-forget-all-cached)
(setq auth-sources '("~/.authinfo.gpg"))
#+end_src
*** use external pinentry program
...as opposed to prompting from the minibuffer (can switch back to `'loopback` for this behavior)
convenient bc it prompts me to put in my smart card before prompting for my pin
#+begin_src emacs-lisp :tangle yes
(setq epa-pinentry-mode 'ask)
(setq epg-pinentry-mode 'ask)
#+end_src
** age
#+begin_src emacs-lisp :tangle packages.el
(package! age :recipe (:host github :repo "anticomputer/age.el"))
(package! pinentry)
#+end_src
#+begin_src emacs-lisp :tangle yes
(use-package! age
  :ensure t
  :demand t
  :custom
  (age-program "rage")
  (age-default-identity "~/.local/share/private/age/yubikey-main-identity.txt")
  (age-default-recipient
   '("~/.local/share/private/age/yubikey-main-recipient.txt"
     "~/.local/share/private/age/yubikey-backup-recipient.txt"))
  (age-pinentry-mode 'ask)
  :config
  (age-file-enable))
(use-package! pinentry
  :config
  (pinentry-start))
#+end_src
#+begin_src elisp :tangle packages.el
(package! magit :pin "692cc5e")
(package! forge :pin "8bace81")
(package! transient :pin "ab22ba0")
#+end_src
