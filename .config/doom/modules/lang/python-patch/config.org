#+TITLE: Config
#+property: header-args:emacs-lisp :tangle yes
#+property: header-args:elisp :tangle yes

* Packages
#+begin_src elisp :tangle packages.el
(package! numpydoc)
#+end_src

* conda
#+begin_src elisp :noweb no-export
(use-package! anaconda-mode
  :defer t
  :config
  <<conda-dirs>>
  <<conda-autoactivate>>
  )
#+end_src
Set path to dirs, so `conda.el` can find them. Note: I set my conda envs to save to a xdg-based path by setting the `env_dirs` property in `~/.condarc` to `~/.config/conda/envs`
#+name: conda-dirs
#+begin_src elisp :tangle no
(setq conda-anaconda-home "/opt/miniconda3")
(setq conda-env-home-directory "/Users/pakelley/.config/conda")
#+end_src
Set up auto-activation of conda envs in projects. For example, in the project root directory you could add the following to a `.dir-locals.el` file:
#+begin_src elisp :tangle no
((python-mode . ((conda-project-env-path . "name-of-my-env"))))
#+end_src
which would tell `conda.el` to use that environment. Notably, you can use the name of the env (rather than the path, as the var name implies).
#+name: conda-autoactivate
#+begin_src elisp :tangle no
(conda-env-autoactivate-mode t)
#+end_src
* numpydoc
#+begin_src emacs-lisp :tangle yes
(use-package! numpydoc
  :custom
  (numpydoc-insertion-style 'yas)
  :config
  (map! :localleader ("d" #'numpydoc-generate)))
#+end_src
* lsp + pdm/PEP-582
#+begin_src emacs-lisp
(defun +patch/get-pdm-packages-path ()
  "For the current PDM project, find the path to the packages."
  (let ((packages-path (string-trim (shell-command-to-string "pdm info --packages"))))
    (concat packages-path "/lib")))

(defun +patch/eglot-workspace-config (server)
  "For the current PDM project, dynamically generate a python lsp config."
  `(:python\.analysis (:extraPaths ,(vector (+patch/get-pdm-packages-path)))))

(setq-default eglot-workspace-configuration #'+patch/eglot-workspace-config)

;; while we're at it, remove doom's hook to stop hearing errors about it
(remove-hook! 'python-mode-local-vars-hook #'+python-init-anaconda-mode-maybe-h)

#+end_src
