#+TITLE: Config
* Packages
#+begin_src elisp :tangle packages.el
(package! ob-mermaid)
(package! org-anki)
(package! org-gtd)
(package! org-ref)
(package! org-pomodoro)
(package! doct)
(package! org-super-agenda :pin "fb5e2ef277bc811a3b061106c99e4c47b6b86f80")
(package! org-pretty-table
  :recipe (:host github :repo "Fuco1/org-pretty-table") :pin "87772a9469d91770f87bfa788580fca69b9e697a")

(use-package! org-super-agenda
  :commands org-super-agenda-mode)
(package! org-modern)
#+end_src

* GTD
** Keybindings
Global keybindings:
| Keybinding | Description                  |
|------------+------------------------------|
| c          | Capture (to inbox file)      |
| e          | Engage (go to GTD agenda)    |
| p          | Process inbox                |
| n          | Show all NEXT tasks          |
| s          | Show projects that are stuck |
| a          | Archive completed tasks      |
Keybindings while processing a task:
| Keybinding | Description   |
|------------+---------------|
| C-c C-c    | Finalize task |
#+begin_src elisp :noweb no-export
(use-package! org-gtd
  :after org
  :init
  <<org-gtd-directory>>
  <<org-gtd-recommendations>>
  <<org-gtd-edna>>
  (map! (:leader (:prefix-map ("G" . "GTD")
                  :desc "Capture"             "c" #'org-gtd-capture
                  :desc "Engage"              "e" #'org-gtd-engage
                  :desc "Process Inbox"       "p" #'org-gtd-process-inbox
                  :desc "Show all next"       "n" #'org-gtd-show-all-next
                  :desc "Show stuck projects" "s" #'org-gtd-show-stuck-projects
                  :desc "Capture"             "c" #'org-gtd-capture
                  :desc "Archive Done"        "a" #'org-gtd-archive-completed-items)
         (:map org-gtd-command-map       "C-c C-c" #'org-gtd-choose))))
#+end_src
** GTD Files
Store GTD files in XDG-based path, sync-ed by Syncthing
#+name: org-gtd-directory
#+begin_src elisp :tangle no
(setq org-gtd-directory "~/.local/share/notes/gtd/")
#+end_src
** Other Recommended config
These are suggested by the `org-gtd` README: set tags when processing tasks, add a `DELEGATED_TO` property, and add an agenda keybinding to the agenda
#+name: org-gtd-recommendations
#+begin_src elisp :tangle no
(setq org-gtd-process-item-hooks '(org-set-tags-command))
#+end_src
** `org-edna` config for GTD
Right now this is only the recommendations from `org-gtd`, but I'll probably add more eventually.
#+name: org-gtd-edna
#+begin_src elisp :tangle no
(setq org-edna-use-inheritance t)
(org-edna-mode 1)
#+end_src
* Roam
#+begin_src elisp :noweb no-export
(use-package! org-roam
  :after doct
  :custom
  <<org-roam-directory>>
  <<org-roam-completion-everywhere>>
  :config
  <<doct-org-roam>>
  <<org-roam-capture-templates>>)
#+end_src
** Roam Files
Store `org-roam` files in XDG-based path, sync-ed by Syncthing
#+name: org-roam-directory
#+begin_src elisp :tangle no
(org-roam-directory "~/.local/share/notes/org-roam/")
#+end_src
** Roam completion everywhere
On the fence about this one, need to check on the performance. Makes linking roam notes together simple though, so I'm enabling it for now: it just provides tab completion for roam note titles.
#+name: org-roam-completion-everywhere
#+begin_src elisp :tangle no
(org-roam-completion-everywhere t)
#+end_src
** Capture templates [0/1]
It takes some work to get `doct` to work with org roam... but from [[https://gist.github.com/vherrmann/f9b21eeea7d7c9123dc400a30599d50d][this gist]], we get the `doct-org-roam` function:
#+name: doct-org-roam
#+begin_src elisp :tangle no
(defun doct-org-roam-convert (groups)
  "Convert GROUPS of templates to `org-roam' compatible templates."
  (setq doct-templates
        (mapcar (lambda (template)
                  (if-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))
                            (org-roam-props (plist-get (plist-get props :doct) :org-roam)))
                      `(,@template ,@org-roam-props)
                    template))
                (doct-flatten-lists-in groups))))

(defun doct-org-roam--target-file (value)
  "Convert declaration's :file VALUE and extensions to capture template syntax."
  (let (type target)
    ;; TODO: This doesn't catch :olp used together with :datetree
    (when-let ((olp (doct--get :olp)))
      (push :olp type)
      (push olp target))
    (if-let ((head (doct--get :head)))
        (progn
          (push :head type)
          (push (pcase head
                  ((pred stringp) (if (doct--expansion-syntax-p head)
                                      (doct--replace-template-strings
                                       head)
                                    head))
                  ((pred functionp) (doct--fill-template (funcall head)))
                  ((pred doct--list-of-strings-p)
                   (mapconcat (lambda (element)
                                (if (doct--expansion-syntax-p element)
                                    (doct--fill-template element)
                                  element))
                              head "\n")))
                target))
      (when-let ((datetree (doct--get :datetree)))
        (push :datetree type)
        (push datetree target)))
    (push :file type)
    (push (doct--type-check :file value '(stringp doct--variable-p)) target)
    `(,(intern (mapconcat (lambda (keyword)
                            (substring (symbol-name keyword) 1))
                          (delq nil type) "+"))
      ,@(delq nil target))))

(defun doct-org-roam--target ()
  "Convert declaration's target to template target."
  (let ((doct-exclusive-target-keywords '(:file :node)))
    (pcase (doct--first-in doct-exclusive-target-keywords)
      ('nil (signal 'doct-no-target `(,doct-exclusive-target-keywords nil ,doct--current)))
      (`(:id ,id) `(id ,(doct--type-check :id id '(stringp))))
      (`(:file ,file) (doct-org-roam--target-file file)))))

(defun doct-org-roam--compose-entry (keys name parent)
  "Return a template suitable for `org-roam-capture-templates'.
The list is of the form: (KEYS NAME type target template additional-options...).
`doct--current-plist' provides the type, target template and additional options.
If PARENT is non-nil, list is of the form (KEYS NAME)."
  `(,keys ,name
          ,@(unless parent
              `(,(doct--entry-type)
                ,(doct--template)
                :target ,(doct-org-roam--target)
                ,@(doct--additional-options)))
          :doct ( :doct-name ,name
                  ,@(cdr doct--current)
                  ,@(when-let ((custom (doct--custom-properties)))
                      `(:doct-custom ,custom)))))

(defun doct-org-roam (declarations)
  "Convert DECLARATIONS to `org-roam-capture-templates'.
DECLARATIONS must be of the same form that `doct' expects with
one addition: the :org-roam keyword.
The :org-roam keyword's value must be a plist mapping `org-roam''s
template syntax extensions (e.g. :file-name :head) to their appropriate values.
Note this does validate the :org-roam plist's values or keywords."

  ;;TODO: we should preserve doct-after-conversion-functions
  ;;in case user already has other functions set.
  (let ((doct-after-conversion-functions (append '(doct-org-roam-convert)
                                                 doct-after-conversion-functions)))
    (cl-letf (((symbol-function 'doct--compose-entry) #'doct-org-roam--compose-entry))
      (doct declarations))))
#+end_src
Notably, the backtick is crucial for setting the hook in my anki template
#+name: org-roam-capture-templates
#+begin_src elisp :tangle no
(setq org-roam-completion-system 'default
      org-roam-capture-templates
      (doct-org-roam
       `(:group "Org Roam"
         :file "%<%Y%m%d%H%M%S>-${slug}.org"
         :head "#+title: ${title}\n"
         :unnarrowed t
         :function ignore ;org-roam hardcodes target file logic
         :type plain
         :children
         (("Default"
           :keys "d"
           :template "%?")
          ("Anki Card"
           :keys "a"
           :hook ,(defun set-anki-deck-from-tags ()
                    (let ((tags (completing-read-multiple "Tag: " (org-roam-tag-completions))))
                      (org-roam-tag-add tags)
                                        ; NOTE this only sets the first tag as ANKI_DECK
                      (org-set-property "ANKI_DECK" (car tags))))
           :template ("* ${title}"
                      "%?"))))))

(setq org-roam-dailies-directory "dailies/"
      org-roam-dailies-capture-templates
      '(("d" "default" entry
         #'org-roam-capture--get-point
         "* %?"
         :file-name "Journal/%<%Y-%m-%d>"
         :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
        ("t" "Task" entry
         #'org-roam-capture--get-point
         "* TODO %?\n  %U\n  %a\n  %i"
         :file-name "Journal/%<%Y-%m-%d>"
         :olp ("Tasks")
         :empty-lines 1
         :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
        ("j" "journal" entry
         #'org-roam-capture--get-point
         "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
         :file-name "Journal/%<%Y-%m-%d>"
         :olp ("Log")
         :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
        ("l" "log entry" entry
         #'org-roam-capture--get-point
         "* %<%I:%M %p> - %?"
         :file-name "Journal/%<%Y-%m-%d>"
         :olp ("Log")
         :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
        ("m" "meeting" entry
         #'org-roam-capture--get-point
         "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
         :file-name "Journal/%<%Y-%m-%d>"
         :olp ("Log")
         :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")))
#+end_src
* Reference [0/1]
- [ ] TODO change these to relative paths
- [ ] TODO set up ebib (the [[a][spacemacs bibtex layer]] should be helpful)
Use org-ref and bibtex for bibliographic references
#+begin_src elisp
(use-package! org-ref
  :defer
  :config
  (setq bibtex-completion-bibliography "/Users/pakelley/.local/share/bibtex/references.bib"
        bibtex-completion-library-path "/Users/pakelley/.local/share/bibtex/pdfs/"
        bibtex-completion-notes-path "/Users/pakelley/.local/share/bibtex/notes.org")
  (setq reftex-default-bibliography '("/Users/pakelley/.local/share/bibtex/references.bib"))
  (setq org-ref-default-bibliography '("/Users/pakelley/.local/share/bibtex/references.bib")
        org-ref-pdf-directory "/Users/pakelley/.local/share/bibtex/pdfs/"
        org-ref-bibliography-notes "/Users/pakelley/.local/share/bibtex/notes.org"))
#+end_src
* Todos
** Todo keywords [0/1]
- [ ] TODO: do I need both `CANCELLED` and `TRASH`?
The sequence of stages my tasks go through. See the [[https://orgmode.org/manual/Tracking-TODO-state-changes.html][org manual]] for more info, but `!` gives a timestamp, `@` lets you leave a note when transitioning through that state, and `/` denotes whether the other symbols happen when transitioning in vs out of the state (before `/` is for transitioning into the state, which is the default).
- TODO: on the agenda, but not something to immediately work on
- NEXT: something I can immediately pick up
- WAIT: blocked by something, don't even consider it a todo until it's unblocked
- DONE: finished, congrats
- CANCELLED: decided not to do this while working on it
- TRASH: decided not to do this while prioritizing
#+begin_src elisp
(setq org-todo-keywords
      '((sequence "NEXT(n)" "TODO(t!)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@!)" "TRASH(r!)")))
(setq org-todo-keyword-faces
      '(("NEXT" . (:foreground "#f0dfaf" :weight bold))
        ("WAIT" . (:foreground "#dc8cc3" :weight bold))
        ("CANCELED" . (:foreground "#8cd0d3" :weight bold))
        ("TRASH" . (:foreground "#dfaf8f" :weight bold))))
#+end_src
* Capture
** Quick keybinding
#+begin_src elisp
(define-key global-map "\C-cc" 'org-capture)
#+end_src
** Capture Templates [0/1]
`doct` makes writing capture templates much simpler and more readable
#+begin_src elisp :noweb no-export
(use-package! doct
  :after (org org-capture)
  :commands doct
  :custom
  <<org-capture-templates>>
  )
#+end_src
Nice function for passing properties to `doct`
#+begin_src elisp
(defun my/doct-properties ()
                   "Add declaration's :properties to current entry."
                   (let ((properties (doct-get :properties)))
                     (dolist (keyword (seq-filter #'keywordp properties))
                       (org-set-property (substring (symbol-name keyword) 1)
                                         (plist-get properties keyword)))))
;; Usage:
;; (doct '(("My capture template"
;;          ...
;;          :hook my/org-property-drawer
;;          :properties (:anki_deck "${category}"))))
#+end_src
See the [[https://orgmode.org/manual/Template-expansion.html][template expansion docs]] for more info on the syntax here
Appending to existing templates to keep project templates
- [ ] figure out where existing templates are coming from, and migrate useful ones here
#+name: org-capture-templates
#+begin_src elisp :tangle no
; setq
(org-capture-templates
      (append org-capture-templates
              (doct '(("Inbox"
                       :keys "i"
                       :file "~/.local/share/notes/gtd/inbox.org"
                       :template "* %?"
                       :kill-buffer t)
                      ("Today"
                       :keys "2"
                       :file "~/.local/share/notes/gtd/org-gtd-tasks.org"
                       :olp ("Calendar")
                       :template ("* TODO %?"
                                  "SCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))")
                       :prepare-finalize (lambda () (progn (org-priority)
                                                           (org-set-tags-command)))
                       :kill-buffer t)
                      ("Meeting"
                       :keys "m"
                       :children
                       (("Retro"
                         :keys "r"
                         :file "~/.local/share/notes/meetings/retro.org"
                         :datetree t
                         :template "* %?"
                         :kill-buffer t)
                        ("Nico 1-on-1"
                         :keys "n"
                         :file "~/.local/share/notes/meetings/nico.org"
                         :datetree t
                         :template "* %?"
                         :kill-buffer t)))
                      ("Shopping" :keys "s"
                       :file "~/.local/share/notes/reference/shopping.org"
                       :template "* %?"
                       :children
                       (("Home" :keys "h" :olp ("Home"))
                        ("Christmas" :keys "c" :olp ("Christmas"))
                        ("Gift" :keys "g" :olp ("Gifts")) ; TODO either add recipient as tag or in olp
                        ("Groceries" :keys "o" :olp ("Groceries"))))
                      (:group "Reference"
                       :file "~/.local/share/notes/reference/capture.org"
                       :template "* %?"
                       :children
                       (("Food"
                         :keys "f"
                         :children
                         (("Recipe"     :keys "r" :olp ("Recipes"))
                          ("Cocktail"   :keys "c" :olp ("Cocktails"))
                          ("Restaurant" :keys "s" :olp ("Restaurants"))))
                        ("Media" :keys "e"
                         :children
                         (("Movie"   :keys "m" :olp ("Movies"))
                          ("Show"    :keys "s" :olp ("Shows"))
                          ("Book"    :keys "b" :olp ("Books"))
                          ("Article" :keys "a" :olp ("Articles"))
                          ("Album"   :keys "l" :olp ("Albums"))))
                        ("Repo" :keys "r" :olp ("Repos"))))))))
#+end_src
* Agenda
** Agenda Files (only include GTD-related files)
#+begin_src elisp
(setq org-agenda-files '("~/.local/share/notes/gtd/org-gtd-tasks.org"))
#+end_src
** Sync
*** Save buffers when modifying todos (taken from [[https://emacs.stackexchange.com/a/33063/15634][this SO answer]])
#+begin_src elisp
(defmacro η (fnc)
  "Return function that ignores its arguments and invokes FNC."
  `(lambda (&rest _rest)
     (funcall ,fnc)))

(advice-add 'org-deadline       :after (η #'org-save-all-org-buffers))
(advice-add 'org-schedule       :after (η #'org-save-all-org-buffers))
(advice-add 'org-store-log-note :after (η #'org-save-all-org-buffers))
(advice-add 'org-todo           :after (η #'org-save-all-org-buffers))
#+end_src
*** Update agenda after 5mins of idle time (inspired by [[https://emacs.stackexchange.com/a/47266/15634][this SO answer]])
#+begin_src elisp
(run-with-idle-timer 300 t (lambda () (save-window-excursion (org-agenda nil "a"))) )
#+end_src
** Super Agenda
A few notes on this:
- including both "agenda" and "alltodo" lets you have both the agenda (with the time grid) /and/ the todo list
- I keep my active TODOs (i.e. the ones scheduled for today, except for "NEXT" and "WAIT") in the agenda, and everything else in the todo list (I keep "NEXT" separate because I treat them as things I can do whenever I have a chance, and I just want to declutter my agenda be removing anything I have to wait on, and therefore probably can't accurately predict when I can get it done)
- I use the order to split the view into 3 sections: the timeboxed agenda, the regular todo list, and the degenerate todos (unscheduled or overdue)
Future enhancements
- [ ] fix priority icons
- [ ] review the other org props I'm setting here
#+begin_src elisp
(after! org-agenda
  (org-super-agenda-mode))

; TODO review these config options
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      ;; org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t)

(setq org-agenda-custom-commands
      '(("." "What's happening"
         ((agenda "" ((org-agenda-span 'day)
                      (org-agenda-start-day "+0d")
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :discard (:todo "NEXT"
                                    :todo "WAIT")
                          :and (:scheduled today
                                :not (:todo "NEXT")
                                :not (:todo "WAIT"))
                          :order 0)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-agenda-span 'week)
                       (org-agenda-start-day "+0d")
                       (org-super-agenda-groups
                        '((:name "Overdue"
                           :scheduled past
                           :face error
                           :order 2)
                          (:name "Next to do"
                           :and (:scheduled today
                                 :todo "NEXT")
                           :discard (:and (:scheduled today
                                           :and (:not (:todo "NEXT") :not (:todo "WAIT"))))
                           :order 1)
                          (:name "Waiting"
                           :and (:scheduled today
                                 :todo "WAIT")
                           :order 1)
                          (:name "Unscheduled"
                           :scheduled nil
                           :face error
                           :order 2)))))))))
#+end_src
Use evil bindings on agenda headers created by super agenda (using best-looking solution from [[https://github.com/alphapapa/org-super-agenda/issues/50][this issue]])
- [ ] should do a proper evil-ification of this eventually
#+begin_src elisp
(after! evil-org-agenda
  (setq org-super-agenda-header-map evil-org-agenda-mode-map))
#+end_src
* Deft
#+begin_src elisp
(setq deft-directory "~/.local/share/notes")
(setq deft-recursive t)
#+end_src
* General
** Notes directory
Top-level note directory, synced with Syncthing
#+begin_src elisp
(setq org-directory "~/.local/share/notes")
#+end_src
** Render latex fragments when opening org file
#+begin_src elisp
(setq org-startup-with-latex-preview t)
#+end_src
** Word wrap
Commenting this out for now; doom seems to do a good job of this on its own
#+begin_src elisp
;(setq org-startup-truncated nil)
;(setq org-startup-indented t)
#+end_src
** Refile
Commenting this out for now, unless I decide I need it
#+begin_src elisp
;(setq org-refile-targets
;      '((nil :maxlevel . 3)
;        (org-agenda-files :maxlevel . 3)))
#+end_src
* Babel [0/1]
- [ ] TODO revisit these
** Confirm evaluate
Don't prompt me to confirm every time I want to evaluate a block
#+begin_src elisp
(setq org-confirm-babel-evaluate nil)
#+end_src
** Inline images
Display/udate images in the buffer after I evaluate a block
#+begin_src elisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+end_src
** Mermaid
Use [[https://mermaid-js.github.io/mermaid/#/][mermaid.js]] to generate diagrams in org files (rendered by babel)
Notably, you'll need to install [[https://github.com/mermaid-js/mermaid-cli][mermaid-cli]].
#+begin_src elisp
(use-package! ob-mermaid
  :defer
  :config
  (setq ob-mermaid-cli-path "/usr/local/bin/mmdc"))
#+end_src
* Pomodoro [0/1]
- [ ] need to see if I can set slack status in pomodoro hooks
#+begin_src elisp :noweb no-export
(use-package! org-pomodoro
  :custom
  ; my personal pomodoro lengths
  (org-pomodoro-length 40)
  (org-pomodoro-short-break-length 10)
  (org-pomodoro-long-break-length 30)
  ; wait for me to start my break
  (org-pomodoro-manual-break t)
  ; only record pomodoro-approved time: overtime doesn't get clocked
  (org-pomodoro-overtime-hook '(org-clock-out))
  ; dont use annoying multiple bell after long break
  (org-pomodoro-long-break-sound org-pomodoro-short-break-sound)
  :config
  <<clockreport-format>>
  (defun +org/switch-task (&optional arg)
    (interactive "P")
    (org-agenda-clock-out)
    (org-agenda-clock-in arg))
  (map! :after org-agenda
        :leader
        (:prefix "n"
         :desc "pomodoro" "p" #'org-pomodoro)
        :map org-agenda-mode-map
        :localleader
        (:prefix ("c" . "clock")
         :desc "switch task" "w" #'+org/switch-task
         :desc "pomodoro" "p" #'org-pomodoro)))
    #+end_src

This gives some useful summary info about time spent on tasks from the agenda, when you have the discipline to use org's clock features.

Oh my god, this is complicated without some background knowledge... see the [[https://orgmode.org/manual/The-clock-table.html][clocktable docs]] for info on setting this var, see [[https://orgmode.org/manual/The-Spreadsheet.html][the spreadsheet docs]] for info on the formula (the [[https://orgmode.org/manual/References.html][references docs]] are a good starting point), and just know that this is using calc under the hood with (what seems to be) org specific additions for the table references.
I have not been able to find a way to change the column names for the clockreport.
My setting here is originally based on [[https://emacs.stackexchange.com/a/12883/15634][this SE answer]].
The save-window-excursion is here bc for some reason formatting the clockreport is leaving the agenda buffer (so I have to navigate to the agenda explicitly after loading it)
  #+name: clockreport-format
  #+begin_src emacs-lisp :tangle no
(setq org-agenda-clockreport-parameter-plist
   `(:link t :maxlevel 2 :formula ,(format "$5=ceil(($3+$4)*60/%s);N" org-pomodoro-length)))
  #+end_src

* Tags [0/1]
- [ ] TODO figure out a better way of updating this
#+begin_src elisp
(setq org-tag-alist
      '(
        ("Configuration")
        ; GTD
        (:startgrouptag)
        ("GTD")
        (:grouptags)
        ("Control")
        ("Persp")
        (:endgrouptag)
        (:startgrouptag)
        ("Control")
        (:grouptags)
        ("Context")
        ("Task")
        (:endgrouptag)
        ("Circuit Theory")))
#+end_src
* Styling
** Bullets
#+begin_src elisp
(after! org-superstar
  (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
        org-superstar-prettify-item-bullets t ))

(setq org-ellipsis " ▾ "
      org-hide-leading-stars t
      org-priority-highest ?A
      org-priority-lowest ?E
      org-fancy-priorities-list
      `(,(list ?A (all-the-icons-octicon "flame" :face 'all-the-icons-red))
        ,(list ?B (all-the-icons-faicon "bolt" :face 'all-the-icons-orange))
        ,(list ?C (all-the-icons-faicon "check" :face 'all-the-icons-yellow))
        ,(list ?D (all-the-icons-faicon "beer" :face 'all-the-icons-green))
        ,(list ?E (all-the-icons-faicon "bed" :face 'all-the-icons-blue)))
      )
      #+end_src
** org-modern
#+begin_src elisp
(use-package! org-modern
  :after org
  :custom
  (org-modern-priority nil)
  (org-modern-internal-target `(,(all-the-icons-material "redo" :face 'all-the-icons-blue) t " "))
  :config
  (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
#+end_src
